version=1
--fuck you
limit = turtle.getFuelLevel() / 2 - 15
x=0
y=0
z=0
f=1
path=0
pathlimit=2000
--note: a whole stack of coal fuels 5,120
returned=1
busy=0

--faces:
-- 1=north, y+
-- 2=east, x+

function printpos()
  print 'position: x, y, z, f'
  print(x)
  print(y)
  print(z)
  print(f)
end

function fullfuel()
  for i = 1,16,1
  do
    turtle.select(i)
    turtle.refuel(64)
  end
end

function faceleft()
  turtle.turnLeft()
  f = f - 1
  getpos()
end

function faceright()
  turtle.turnRight()
  f = f + 1
  getpos()
end

function getpos()
--fix face
  if f == 0
  then
    f = 4
  elseif f == 5
  then
    f = 1
  end
--update position
  if moved == 1 and f == 1
  then
    y = y + 1
  elseif moved == 1 and f == 2
  then
    x = x + 1
  elseif moved == 1 and f == 3
  then
    y = y - 1
  elseif moved == 1 and f == 4
  then
    x = x - 1
  end
  moved = 0
  printpos()
end

function returnchest()
    
    --calculate path
  if x < 0
  then
    tx = x * -1
  else tx = x
  end
  if y < 0
  then
    ty = y * -1
  else ty = y
  end
  if z < 0
  then
    tz = z * -1
  else tz = z
  end
  
  path = tx + ty + tz

-- return to chest
busy = 1  
  if x < 0
  then
    while f ~= 2
    do
      faceright()
    end
    while x ~= 0
    do
      dig()
    end
  elseif x > 0
  then
    while f ~= 4
    do
      faceright()
    end
    while x ~= 0
    do
      dig()
    end
  end
  
  if z ~= 0
  then
    while z ~= 0
    do
      godown()
    end
  end

  if y ~= 0
  then
    while f ~= 3
    do
      faceright()
    end
    while y ~= 0
    do
      dig()
    end
  end

  if turtle.getFuelLevel() < 100000
  then
    fullfuel()
  end

  busy = 0
    
  for i = 1,16,1
  do
    turtle.select(i)
    if turtle.drop(64)
    then
      print 'depositing items :) my path distance was...'
      print(path)
    else
      print 'chest seems to be full!'
      exit()
    end
  end 

  if returned ~= 1
  then
    print 'failed to return to prev position on given fuel, quitting...'
    exit()
  end
  
  returned = 0

--path limit check
  if path > pathlimit
  then
    print 'pathlimit exceeded, mission success!'
    exit()
  end

--return to last position
  print 'returning to my last position'
  while f ~= 1
  do
    faceright()
  end
  while y ~= ty
  do
    dig()
  end

  returned = 1
  pattern()
end



function checkinv()
  invok = 0
  s = 16
  repeat
    turtle.select(s)
    if turtle.getItemCount() == 0
    then
      invok = 1
    end
    s = s - 1
  until invok == 1 or s == 1
    if invok == 0
    then
      returnchest()
    end
  turtle.select(1)
end

function check()
--check bypass
 if busy == 0
 then
    
--check for fuel, then deal with fuel
  if turtle.getFuelLevel() < y / 2 - 15 or turtle.getFuelLevel() == 0
  then
    for i = 1,16,1
    do
      turtle.select(i)
      turtle.refuel(64)
    end
  end
  if turtle.getFuelLevel() < y / 2 - 15 or turtle.getFuelLevel() == 0
  then
    returnchest()
    print 'Sory ran out of fuel :('
    exit()
  end
  
--check for inventory space, then deal
  checkinv()    
--(end the bypass if statement)
 end
end

function goup()
  turtle.digUp()
  check()
  if turtle.up()
  then
    z = z + 1
  end
  check()
end

function godown()
  turtle.digDown()
  check()
  if turtle.down()
  then
    z = z - 1
  end
  check()
end

function dig()
  turtle.dig()
  check()
  if turtle.forward()
  then
    moved = 1
  end
  getpos()
  check()
end

function pattern()
--  os.sleep(1)
  for i = 1,4,1
  do
    dig()
  end
  faceleft()
  goup()
  for i = 1,11,1
  do
    dig()
  end
  godown()
  faceright()
  os.sleep(1)
--now reverse
  for i = 1,4,1
  do
    dig()
  end
  goup()
  faceright()
  for i = 1,11,1
  do
    dig()
  end
  godown()
  faceleft()
  os.sleep(1)
  return pattern()
end


--start
for i = 1,16,1
do
  turtle.select(i)
  turtle.refuel(64)
end
turtle.select(1)
pattern()
